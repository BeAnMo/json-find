/* 
    JSON-Find
Small utility for searching through JSON or a JSON-compatible object for values at
given keys.  
*/
'use strict';
/**** JSON document ***
    "this" assumes an Object or Array */

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var JSON_DATA = Object.create({}, {
  checkKey: {
    configurable: false,
    enumerable: false,

    /* object at given key or false */
    value: function value(key) {
      return reduceJSON(false, this, function (n, m) {
        return m;
      }, key);
    }
  },
  findValues: {
    configurable: false,
    enumerable: false,

    /* object at given key or false */
    value: function value() {
      for (var _len = arguments.length, keys = new Array(_len), _key = 0; _key < _len; _key++) {
        keys[_key] = arguments[_key];
      }

      return findValues.apply(void 0, [this].concat(keys));
    }
  },
  extractPaths: {
    configurable: false,
    enumerable: false,

    /* extract objects at given paths */
    value: function value(useNewKeys) {
      for (var _len2 = arguments.length, keys = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        keys[_key2 - 1] = arguments[_key2];
      }

      return extractPaths.apply(void 0, [this, useNewKeys].concat(keys));
    }
  }
});
/*** Constructor *** 
    JsonFind will return Atoms as is, Arrays & Objects are
    converted to JsonFind Object */

function JsonFind(doc) {
  var possibleJson = JSON.stringify(doc);

  if (possibleJson === undefined) {
    throw new Error('Object is invalid JSON');
  } else if (isAtom(doc) || doc === null) {
    return doc;
  } else {
    return Object.assign(Object.create(JSON_DATA), doc);
  }
}

var assignments = function () {
  Object.assign(JsonFind, {
    prototype: JSON_DATA
  });
}();

module.exports = JsonFind;
/*** JSON_DATA methods ***/

/* Object, ...String -> Object
    searches through an object for all given keys,
    return an object of search keys & their values  */

function findValues(toSearch) {
  for (var _len3 = arguments.length, searchFor = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    searchFor[_key3 - 1] = arguments[_key3];
  }

  var searchesLen = searchFor.length;
  var results = {};
  var searches = {};

  for (var i = 0; i < searchesLen; i++) {
    searches[searchFor[i]] = true;
  }
  /* Object, Object -> Void */


  function traverseObject(toSearchObj, searchForObj) {
    var allKeys = Object.keys(toSearchObj);
    var len = allKeys.length;

    for (var _i = 0; _i < len; _i++) {
      var key = allKeys[_i];
      var val = toSearchObj[key];

      if (searchForObj[key] && !results[key]) {
        results[key] = val;
      } else if (isObject(val)) {
        traverseObject(val, searchForObj);
      } else if (isArray(val)) {
        traverseArray(val, searchForObj);
      }
    }
  }
  /* Array, Object -> Void */


  function traverseArray(arr, searchForObj) {
    var len = arr.length;

    for (var _i2 = 0; _i2 < len; _i2++) {
      var item = arr[_i2];

      if (isArray(item)) {
        traverseArray(item, searchForObj);
      } else if (isObject(item)) {
        traverseObject(item, searchForObj);
      }
    }
  }

  traverseObject(toSearch, searches);
  return results;
}
/* applies function to value at given key */


function reduceJSON(accum, json, fn, searchFor) {
  if (isKey(json, searchFor)) {
    return fn(accum, json[searchFor]);
  } else if (isAtom(json)) {
    return accum;
  } else if (isArray(json)) {
    return json.reduce(function (acc, item) {
      return reduceJSON(acc, item, fn, searchFor);
    }, accum);
  } else {
    var keys = Object.keys(json);
    return keys.reduce(function (acc, key) {
      return reduceJSON(acc, json[key], fn, searchFor);
    }, accum);
  }
}
/* Object, Array-of-String, ...Array-of-String -> Object 
    extracts values from an object from multiples paths: 
    a Path is [...String] 
    assumes newKeys is false or [...String] */


function extractPaths(obj, newKeys) {
  var nkLen = newKeys.length;

  for (var _len4 = arguments.length, paths = new Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {
    paths[_key4 - 2] = arguments[_key4];
  }

  var pLen = paths.length;
  var curried = curry(assignKeysAtPaths, obj, newKeys, paths);
  return nkLen > pLen ? curried(nkLen) : curried(pLen);
}
/*** Helpers ***/

/* JSON, [...String], [...[...String]], Number -> Object */


function assignKeysAtPaths(obj, newKeys, paths, loopLen) {
  var result = {};

  for (var i = 0; i < loopLen; i++) {
    // allows for unequal newKeys/paths lengths
    var iPath = paths[i] ? paths[i] : null;
    var iNewKey = newKeys[i] ? newKeys[i] : paths[i].slice(-1);
    var objAtPath = iPath === null ? null : recurPath(obj, iPath);
    var key = objAtPath ? Object.keys(objAtPath)[0] : null;
    var curried = curry(Object.assign, result); // prevent same keys from overriding

    if (newKeys) {
      if (objAtPath) {
        curried(_defineProperty({}, iNewKey, objAtPath[key]));
      } else {
        curried(_defineProperty({}, iNewKey, objAtPath));
      }
    } else if (key in result) {
      curried(_defineProperty({}, key + '+' + i, objAtPath[key]));
    } else {
      curried(objAtPath);
    }
  }

  return result;
}
/* Object, Array-of-String -> Object
    retrieves the value of an object at the given path
    returns { String-X: object }
    where String-X is the key from the last index of 
    the given array */


function recurPath(obj, arr) {
  var lastKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

  if (arr.length === 0) {
    return _defineProperty({}, lastKey, obj);
  } else {
    return recurPath(obj[arr[0]], arr.slice(1), arr[0]);
  }
}
/* [[...X -> Y], ...X -> [...Y -> Z]] -> Z */


function curry(fn) {
  for (var _len5 = arguments.length, firstArgs = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
    firstArgs[_key5 - 1] = arguments[_key5];
  }

  return function () {
    for (var _len6 = arguments.length, secondArgs = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
      secondArgs[_key6] = arguments[_key6];
    }

    return fn.apply(null, firstArgs.concat(secondArgs));
  };
}

function isAtom(v) {
  return null === v || typeof v === 'boolean' || typeof v === 'number' || typeof v === 'string';
}

function isArray(v) {
  return Array.isArray(v);
}

function isObject(v) {
  return _typeof(v) === 'object' && !isArray(v) && v !== null;
}

function isNull(v) {
  return null === v ? 'null' : v;
}

function isCompound(v) {
  return isArray(v) || isObject(v);
}

function isKey(json, searchFor) {
  return json === null ? false : isCompound(json) && searchFor in json;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,