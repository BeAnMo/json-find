var JsonFind=function(){"use strict";function t(){this.q=[],this.L=0}function e(t,e){let n=t,o=0;for(;void 0!==e[o]&&(n=n[e[o]],void 0!==n);)o++;return n}function n(t,e,n){let o=t,i=0;for(;void 0!==e[i+1];){const t=e[i];o=void 0===o[t]?o[t]=isNaN(e[i+1])?{}:[]:o[t],i++}return o[e[i]]=n,o}function o(t){return Array.isArray(t)}function i(t){return o(t)||function(t){return"object"==typeof t&&!o(t)&&null!==t}(t)}function r(t,e="."){return t.split(e)}function s(e,n){this.doc=e,this.delim=n,this.q=new t,this.setQueue("",Object.keys(this.doc))}function u(t,e={}){if(!i(t))throw new Error("Instantiating JsonFind requires an Object or an Array.");this.options={delimeter:e.delimeter||".",useConstructor:e.useConstructor||!1},this.doc=t}return t.prototype.push=function(t){return this.L=this.q.push(t),this},t.prototype.pop=function(){const[t,...e]=this.q;return this.q=e,this.L>0&&(this.L-=1),t},t.prototype.empty=function(){return 0===this.L},s.prototype.setQueue=function(t,e){return e.forEach((e=>{const n=`${t}${e}`;this.q.push(n)})),this},s.prototype.splitPath=function(t){return r(t,this.delim)},s.prototype.getCurrentKey=function(t){return(e=this.splitPath(t))[e.length-1];var e},s.prototype.getAtPath=function(t){return e(this.doc,this.splitPath(t))},s.prototype.next=function(){const t=this.q.pop(),e=this.getAtPath(t);return i(e)?(this.setQueue(`${t}${this.delim}`,Object.keys(e)),this.next()):{path:t,value:e,key:this.getCurrentKey(t)}},s.prototype.empty=function(){return this.q.empty()},u.prototype.get=function(t,n={}){const o=n.useConstructor||this.options.useConstructor,s=r(t,this.options.delimeter),h=e(this.doc,s);return o&&i(h)?new u(h,this.options):h},u.prototype.set=function(t,e){const o=r(t,this.options.delimeter);return n(this.doc,o,e),this},u.prototype.each=function(t){const e=new s(this.doc,this.options.delimeter);for(;!e.empty();)t.call(this,e.next())},u.prototype.prune=function(t){const e=new s(this.doc,this.options.delimeter),n=new u(u.getBase(this.doc),this.options);for(;!e.empty();){const o=e.next();t.call(this,o)&&n.set(o.path,o.value)}return n},u.getBase=function(t){return o(t)?[]:{}},u.clone=function(t,e){const o=e&&e.delimeter||".",i=new s(t,o);let h=u.getBase(t);for(;!i.empty();){const t=i.next();n(h,r(t.path,o),t.value)}return h},u}();
